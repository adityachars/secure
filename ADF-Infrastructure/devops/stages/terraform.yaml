parameters:
  - name: environment
    type: string
    default: ""
  - name: connection
    type: string
    default: ""
  - name: resourceGroup
    type: string
    default: ""
  - name: storageAccount
    type: string
    default: ""
  - name: customTerraformParams
    type: string
    default: ""
  - name: adfStorageAccount
    type: string
    default: ""

jobs:
  - deployment: DeploymentPlan
    displayName: Deployment plan
    pool:
      vmImage: "ubuntu-latest"
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - template: ../stages/terraform-init.yaml
              parameters:
                environment: ${{ parameters.environment }}
                connection: ${{ parameters.connection }}
                resourceGroup: ${{ parameters.resourceGroup }}
                storageAccount: ${{ parameters.storageAccount }}

            - task: AzurePowerShell@5
              displayName: "Azure PowerShell script to add pipeline IP"
              inputs:
                azureSubscription: ${{ parameters.connection }}
                ScriptPath: '$(Pipeline.Workspace)/ADF-Infrastructure/ps scripts/storage_ip.ps1'
                ScriptArguments: '-resourceGroup ${{ parameters.resourceGroup }} 
                                  -adfStorageAccount ${{ parameters.adfStorageAccount }}'
                workingDirectory: "$(Pipeline.Workspace)/ADF-Infrastructure/ps scripts"
                azurePowerShellVersion: LatestVersion
                pwsh: true

            - task: AzureCLI@2
              displayName: "Terraform plan"
              env:
                AZURE_CORE_OUTPUT: none
              inputs:
                azureSubscription: ${{ parameters.connection }}
                scriptType: bash
                addSpnToEnvironment: true
                scriptLocation: inlineScript
                workingDirectory: "$(Pipeline.Workspace)/ADF-Infrastructure"
                inlineScript: |
                  customParams=${{ parameters.customTerraformParams }}
                  if [[ -n "$customParams" ]]
                  then
                      customParams="-var= ${customParams}"
                  fi
                  terraform plan -out=terraform-${{ parameters.environment }}.tfplan $customParams
            
            - publish: "$(Pipeline.Workspace)/ADF-Infrastructure/terraform-${{ parameters.environment }}.tfplan"
              artifact: terraform-plan-${{ parameters.environment }}

            - task: Bash@3
              name: "readPlanResult"
              displayName: "Read terraform plan result"
              env:
                env_name: ${{ parameters.environment }}
                AZURE_CORE_OUTPUT: none
              inputs:
                workingDirectory: "$(Pipeline.Workspace)/ADF-Infrastructure"
                targetType: "inline"
                script: |
                  terraformPlan=`terraform show terraform-${{ parameters.environment }}.tfplan`;
                  toBeAdded=`echo $terraformPlan | grep -o -P '(?<=Plan:).*(?=to add)' | xargs`;
                  toBeChanged=`echo $terraformPlan | grep -o -P "(?<= add, ).*(?= to change)" | xargs`;
                  toBeDestroyed=`echo $terraformPlan | grep -o -P "(?<= change, ).*(?= to destroy)" | xargs`;

                  hasChanges=false
                  if [[ ! -z $toBeAdded ]] && ([[ $toBeAdded != 0 ]] || [[ $toBeChanged != 0 ]] || [[ $toBeDestroyed != 0 ]]); then
                      hasChanges=true
                  fi

                  if [[ $hasChanges = true ]] && [[ $toBeDestroyed = 0 ]]; then
                      echo "##vso[task.setvariable variable=HAS_CHANGES_ONLY;isOutput=true]true"
                      echo "##vso[task.logissue type=warning]Changes with no destroys detected, it is safe for the pipeline to proceed automatically"
                  fi
                  if [[ $hasChanges = true ]] && [[ $toBeDestroyed != 0 ]]; then
                      echo "##vso[task.setvariable variable=HAS_DESTROY_CHANGES;isOutput=true]true"
                      echo "##vso[task.logissue type=warning]Changes with Destroy detected, pipeline will require a manual approval to proceed"
                  fi
                  if [[ $hasChanges = false ]]; then
                      echo "##vso[task.logissue type=warning]No changes detected, terraform apply will not run"
                  fi                
                  
  - job: WaitForValidation
    displayName: Wait for terraform plan validation
    pool: server
    timeoutInMinutes: 65 # job times out in 3 days
    dependsOn: "DeploymentPlan"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.DeploymentPlan.outputs['DeploymentPlan.readPlanResult.HAS_DESTROY_CHANGES'], 'true')
        )  
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 60 # task times out in 1 day
        inputs:
          instructions: 'Please verify the infrastructure plan and resume'
          onTimeout: 'reject'
  
  - deployment: Deployment
    displayName: Deployment apply
    pool:
      vmImage: "ubuntu-latest"
    environment: ${{ parameters.environment }}
    dependsOn: "WaitForValidation"
    condition: |
      or(eq(dependencies.DeploymentPlan.outputs['DeploymentPlan.readPlanResult.HAS_DESTROY_CHANGES'], 'true'), eq(dependencies.DeploymentPlan.outputs['DeploymentPlan.readPlanResult.HAS_CHANGES_ONLY'], 'true'))
    strategy:
      runOnce:
        deploy:
          steps:
            - template: ../stages/terraform-init.yaml
              parameters:
                environment: ${{ parameters.environment }}
                connection: ${{ parameters.connection }}
                resourceGroup: ${{ parameters.resourceGroup }}
                storageAccount: ${{ parameters.storageAccount }}

            - task: AzurePowerShell@5
              displayName: "Azure PowerShell script to add pipeline IP"
              inputs:
                azureSubscription: ${{ parameters.connection }}
                ScriptPath: '$(Pipeline.Workspace)/ADF-Infrastructure/ps scripts/storage_ip.ps1'
                ScriptArguments: '-resourceGroup ${{ parameters.resourceGroup }} 
                                  -adfStorageAccount ${{ parameters.adfStorageAccount }}'
                workingDirectory: "$(Pipeline.Workspace)/ADF-Infrastructure/ps scripts"
                azurePowerShellVersion: LatestVersion
                pwsh: true
                
            - task: AzurePowerShell@5
              displayName: "Azure PowerShell script"
              inputs:
                azureSubscription: ${{ parameters.connection }}
                ScriptPath: '$(Pipeline.Workspace)/ADF-Infrastructure/ps scripts/storage_table.ps1'
                ScriptArguments: '-resourceGroup ${{ parameters.resourceGroup }} 
                                  -adfStorageAccount ${{ parameters.adfStorageAccount }}'
                workingDirectory: "$(Pipeline.Workspace)/ADF-Infrastructure/ps scripts"
                azurePowerShellVersion: LatestVersion
                pwsh: true

            - task: AzureCLI@2
              displayName: "Terraform apply"
              env:
                AZURE_CORE_OUTPUT: none
              inputs:
                azureSubscription: ${{ parameters.connection }}
                scriptType: bash
                addSpnToEnvironment: true
                scriptLocation: inlineScript
                workingDirectory: "$(Pipeline.Workspace)/ADF-Infrastructure"
                inlineScript: |
                  terraform apply -auto-approve ../terraform-plan-${{ parameters.environment }}/terraform-${{ parameters.environment }}.tfplan -no-color
